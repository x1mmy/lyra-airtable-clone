// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases Base[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum FieldType {
    Text
    Number
}

model Base {
  id                 String   @id @default(cuid())
  name               String
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tables             Table[]  @relation("BaseTables")
  lastOpenedTableId  String?  @unique
  lastOpenedTable    Table?   @relation("BaseLastOpenedTable", fields: [lastOpenedTableId], references: [id])
  createdAt          DateTime @default(now())
}

model Table {
  id                String   @id @default(cuid())
  name              String
  baseId            String
  base              Base     @relation("BaseTables", fields: [baseId], references: [id], onDelete: Cascade)
  openedByBase      Base?    @relation("BaseLastOpenedTable")
  fields            Field[]
  records           Record[]
  views             View[]   @relation("TableViews")
  lastOpenedViewId  String?  @unique
  lastOpenedView    View?    @relation("TableLastOpenedView", fields: [lastOpenedViewId], references: [id])
  createdAt         DateTime @default(now())
  @@unique([baseId, name])
}

model Field {
    id String @id @default(cuid())
    name String
    tableId String
    table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)
    type FieldType
    @@unique([tableId, name])
}

model Record {
    id String @id @default(cuid())
    tableId String
    table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)
    data Json
    position Float
    createdAt DateTime @default(now())
    @@unique([tableId, position])
}

model View {
  id              String   @id @default(cuid())
  name            String
  tableId         String
  table           Table    @relation("TableViews", fields: [tableId], references: [id], onDelete: Cascade)
  openedByTable   Table?   @relation("TableLastOpenedView")
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Base {
    id          String   @id @default(cuid())
    name        String
    description String?
    color       String   @default("#6366f1")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    tables Table[]

    @@index([createdById])
}

model Table {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    base   Base   @relation(fields: [baseId], references: [id], onDelete: Cascade)
    baseId String

    columns Column[]
    rows    Row[]
    views   View[]

    @@index([baseId])
}

model Column {
    id       String     @id @default(cuid())
    name     String
    type     ColumnType @default(TEXT)
    position Int
    width    Int        @default(150)
    visible  Boolean    @default(true)

    table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId String

    cells Cell[]

    @@index([tableId])
    @@unique([tableId, position])
}

model Row {
    id        String   @id @default(cuid())
    position  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId String

    cells Cell[]

    @@index([tableId])
    @@unique([tableId, position])
}

model Cell {
    id    String @id @default(cuid())
    value String?

    row      Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
    rowId    String
    column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
    columnId String

    @@unique([rowId, columnId])
    @@index([rowId])
    @@index([columnId])
}

model View {
    id          String   @id @default(cuid())
    name        String
    type        ViewType @default(GRID)
    filters     Json?
    sorts       Json?
    hiddenCols  Json?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId String

    @@index([tableId])
}

enum ColumnType {
    TEXT
    NUMBER
    SELECT
    MULTISELECT
    DATE
    CHECKBOX
    URL
    EMAIL
    PHONE
    ATTACHMENT
    FORMULA
    LOOKUP
    ROLLUP
}

enum ViewType {
    GRID
    GALLERY
    CALENDAR
    KANBAN
    FORM
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    bases         Base[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}